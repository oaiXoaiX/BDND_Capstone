// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('Verifier');

const Proof = require('../square/proof.json');
const Proof_incorrect = require('../square/proof2.json');

let a = Proof['proof']['A'];
let a_p = Proof['proof']['A_p'];
let b = Proof['proof']['B'];
let b_p = Proof['proof']['B_p'];
let c = Proof['proof']['C'];
let c_p = Proof['proof']['C_p'];
let h = Proof['proof']['H'];
let k = Proof['proof']['K'];
let input = Proof['input'];

let a_in = Proof_incorrect['proof']['A'];
let a_p_in = Proof_incorrect['proof']['A_p'];
let b_in = Proof_incorrect['proof']['B'];
let b_p_in = Proof_incorrect['proof']['B_p'];
let c_in = Proof_incorrect['proof']['C'];
let c_p_in = Proof_incorrect['proof']['C_p'];
let h_in = Proof_incorrect['proof']['H'];
let k_in = Proof_incorrect['proof']['K'];
let input_in = Proof_incorrect['input'];

contract('TestSquareVerifier', accounts => {
    
    const account_one = accounts[0];
    
    describe('verify proof', function () {
        beforeEach(async function () {
        this.contract = await SquareVerifier.new({from: account_one});
        });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
        it('verification with correct proof', async function () {

            let result = await this.contract.verifyTx.call(a, a_p, b, b_p, c, c_p, h, k, input);
            assert.equal(result, true, 'could not verify the proof');
        });
    
    // Test verification with incorrect proof
        it('verification with incorrect proof', async function () {

            let result2 = await this.contract.verifyTx.call(a_in, a_p_in, b_in, b_p_in, c_in, c_p_in, h_in, k_in, input_in);
            assert.equal(result2, false, 'could not verify the incorrect proof');
        });
    });
})
